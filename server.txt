#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <arpa/inet.h>

void err(char *msg)
{
	perror(msg);
	exit(1);
}	
int main (void)
{
	int soc;
	char buffer[255];
	struct sockaddr_in sr,rcv;
   	socklen_t slen=sizeof(rcv);	
	
	
	

if((soc=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP))==-1)
		err("Nu merge socket");

	memset((char *) &sr,0,sizeof(sr));
	sr.sin_family=AF_INET;
	sr.sin_port=htons(5000);
	struct ifreq ifr;
    char iface[] = "wlx00160a2401d4";
    ifr.ifr_addr.sa_family = AF_INET;
    strncpy(ifr.ifr_name , iface , IFNAMSIZ-1);
    ioctl(soc, SIOCGIFADDR, &ifr);
	inet_aton(inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr),&sr.sin_addr.s_addr);
	printf("\n Serverul cu ip-adressul : %s si portul %d\n",inet_ntoa(sr.sin_addr),ntohs(sr.sin_port));
	
	
if(bind(soc,(struct sockaddr*)&sr,sizeof(sr))==-1)
		err("Nu merge bind");

printf("\nAstept client:\n");
int broadcastPermission=1;
if (setsockopt(soc, SOL_SOCKET, SO_BROADCAST, (void *) &broadcastPermission, 
          sizeof(broadcastPermission)) < 0)
          err("Eroare la broadcast");

if(recvfrom(soc,buffer,255,0,(struct sockaddr*)&rcv,&slen)==-1)
			err("Recv from error");
	printf("Received packet from %s : %d \n",inet_ntoa(rcv.sin_addr),ntohs(rcv.sin_port));
	printf("Data : %s\n",buffer);
while(1)
	{
	scanf("%s",buffer);
	printf("Data : %s\n",buffer);
	
	if(strcmp(buffer,"init")==0)
	{buffer[0]=3;buffer[1]=3;buffer[2]=1;buffer[3]=5;buffer[4]=7<<4|1;buffer[5]=8<<4|2;buffer[6]=9<<4|3;buffer[7]=10<<4|1;buffer[8]=11<<4|4;}
	else 
		if(strcmp(buffer,"stop")==0)
			{
			
			buffer[0]=2;buffer[1]=170;buffer[2]=187;buffer[3]=204;buffer[4]=221;buffer[5]='0';}
				else
					if(strcmp(buffer,"listen")==0)
						{buffer[0]=1;buffer[1]=2;buffer[2]=1;buffer[3]=5<<4|2;buffer[4]=1;buffer[5]='0';}

	if(sendto(soc,buffer,strlen(buffer),0,(struct sockaddr*)&rcv,slen)==-1)
		err("Sendto error");
	//memset(buffer,'\0',11);
}
close(soc);
return 0;
}
